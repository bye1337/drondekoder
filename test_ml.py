#!/usr/bin/env python3
"""
–¢–µ—Å—Ç ML —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ YOLOv8
"""
import numpy as np
import cv2
from object_matcher import ObjectMatcher

def test_detection():
    """–¢–µ—Å—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤"""
    print("=" * 60)
    print("–¢–ï–°–¢ 1: –î–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏
    test_image = np.zeros((600, 800, 3), dtype=np.uint8)
    
    # –†–∏—Å—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ –∫–∞–∫ "–æ–±—ä–µ–∫—Ç—ã"
    cv2.rectangle(test_image, (100, 100), (300, 300), (255, 0, 0), -1)  # –ö—Ä–∞—Å–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç
    cv2.rectangle(test_image, (400, 200), (600, 400), (0, 255, 0), -1)  # –ó–µ–ª–µ–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç
    cv2.rectangle(test_image, (200, 400), (500, 550), (0, 0, 255), -1)  # –°–∏–Ω–∏–π –∫–≤–∞–¥—Ä–∞—Ç
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ML —Å–∏—Å—Ç–µ–º—É
    matcher = ObjectMatcher(model_size='n', confidence_threshold=0.15)
    
    if not matcher.yolo_available:
        print("‚ùå YOLO –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –¢–µ—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω.")
        return False
    
    print("\n–î–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤...")
    objects = matcher.detect_objects(test_image)
    
    print(f"–ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(objects)}")
    for i, obj in enumerate(objects):
        print(f"  –û–±—ä–µ–∫—Ç {i+1}: —Ü–µ–Ω—Ç—Ä=({obj.center[0]}, {obj.center[1]}), "
              f"–∫–ª–∞—Å—Å={obj.class_id}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å={obj.confidence:.2f}, "
              f"–ø—Ä–∏–∑–Ω–∞–∫–æ–≤={len(obj.embedding)}")
    
    if len(objects) > 0:
        print("‚úÖ –î–µ—Ç–µ–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        return True
    else:
        print("‚ö† –û–±—ä–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (—ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Ñ–æ—Ä–º)")
        return True


def test_feature_extraction():
    """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢ 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤–∞ —Ä–∞–∑–Ω—ã—Ö –ø–∞—Ç—á–∞
    patch1 = np.random.randint(0, 255, (100, 100, 3), dtype=np.uint8)
    patch2 = np.random.randint(0, 255, (100, 100, 3), dtype=np.uint8)
    
    matcher = ObjectMatcher(model_size='n')
    
    if not matcher.yolo_available:
        print("‚ùå YOLO –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        return False
    
    features1 = matcher._extract_visual_features(patch1)
    features2 = matcher._extract_visual_features(patch2)
    
    print(f"–†–∞–∑–º–µ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(features1)}")
    print(f"–ü–µ—Ä–≤—ã–µ 10 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ patch1: {features1[:10]}")
    print(f"–ü–µ—Ä–≤—ã–µ 10 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ patch2: {features2[:10]}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ä–∞–∑–Ω—ã–µ
    distance = np.linalg.norm(features1 - features2)
    print(f"\n–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏: {distance:.4f}")
    
    if distance > 0.1:
        print("‚úÖ –ü—Ä–∏–∑–Ω–∞–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è –∏ —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è!")
        return True
    else:
        print("‚ö† –ü—Ä–∏–∑–Ω–∞–∫–∏ —Å–ª–∏—à–∫–æ–º –ø–æ—Ö–æ–∂–∏")
        return True


def test_matching():
    """–¢–µ—Å—Ç —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢ 3: –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à—É—é –∫–∞—Ä—Ç—É –∏ –º–∞–ª–µ–Ω—å–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    large_map = np.zeros((1000, 1500, 3), dtype=np.uint8)
    small_image = np.zeros((300, 300, 3), dtype=np.uint8)
    
    # –†–∏—Å—É–µ–º –æ–±—ä–µ–∫—Ç—ã –Ω–∞ –±–æ–ª—å—à–æ–π –∫–∞—Ä—Ç–µ
    cv2.rectangle(large_map, (200, 200), (500, 500), (255, 0, 0), -1)
    cv2.rectangle(large_map, (800, 300), (1100, 600), (0, 255, 0), -1)
    
    # –†–∏—Å—É–µ–º –ø–æ—Ö–æ–∂–∏–π –æ–±—ä–µ–∫—Ç –Ω–∞ –º–∞–ª–µ–Ω—å–∫–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
    cv2.rectangle(small_image, (50, 50), (250, 250), (255, 0, 0), -1)
    
    matcher = ObjectMatcher(model_size='n', confidence_threshold=0.15)
    
    if not matcher.yolo_available:
        print("‚ùå YOLO –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        return False
    
    print("–ü–æ–∏—Å–∫ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è...")
    result = matcher.find_location(large_map, small_image)
    
    if result:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ!")
        print(f"  –¶–µ–Ω—Ç—Ä: ({result['x']}, {result['y']})")
        print(f"  –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.2f}%")
        print(f"  –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –æ–±—ä–µ–∫—Ç–æ–≤: {result['matches_count']}")
        return True
    else:
        print("‚ö† –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return True


def test_real_map():
    """–¢–µ—Å—Ç –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–∞—Ö –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å"""
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–∞—Ö")
    print("=" * 60)
    
    import os
    import glob
    
    map_files = glob.glob("maps_storage/*.jpg") + glob.glob("uploads/*.jpg")
    
    if not map_files:
        print("‚ö† –†–µ–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç.")
        return True
    
    print(f"–ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç: {len(map_files)}")
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É
    map_path = map_files[0]
    print(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã: {map_path}")
    
    map_image = cv2.imread(map_path)
    if map_image is None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç—É")
        return False
    
    print(f"–†–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã: {map_image.shape[1]}x{map_image.shape[0]}")
    
    # –°–æ–∑–¥–∞–µ–º –º–∞–ª–µ–Ω—å–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ü–µ–Ω—Ç—Ä–∞ –∫–∞—Ä—Ç—ã
    h, w = map_image.shape[:2]
    center_y, center_x = h // 2, w // 2
    small_size = min(h, w) // 3
    
    small_image = map_image[
        center_y - small_size//2:center_y + small_size//2,
        center_x - small_size//2:center_x + small_size//2
    ]
    
    matcher = ObjectMatcher(model_size='n', confidence_threshold=0.25)
    
    if not matcher.yolo_available:
        print("‚ùå YOLO –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        return False
    
    print("–ü–æ–∏—Å–∫ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–µ...")
    result = matcher.find_location(map_image, small_image, search_step=100)
    
    if result:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ!")
        print(f"  –¶–µ–Ω—Ç—Ä: ({result['x']}, {result['y']})")
        print(f"  –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.2f}%")
        print(f"  –°–æ–≤–ø–∞–¥–µ–Ω–∏–π: {result['matches_count']}")
        
        expected_x = center_x
        expected_y = center_y
        found_x = result['x']
        found_y = result['y']
        
        error = np.sqrt((expected_x - found_x)**2 + (expected_y - found_y)**2)
        print(f"  –û—à–∏–±–∫–∞: {error:.1f} –ø–∏–∫—Å–µ–ª–µ–π")
        
        if error < 200:
            print("‚úÖ –û—à–∏–±–∫–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ!")
        else:
            print("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 200 –ø–∏–∫—Å–µ–ª–µ–π")
        
        return True
    else:
        print("‚ö† –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return True


def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ML –°–ò–°–¢–ï–ú–´")
    print("=" * 60)
    
    results = []
    
    try:
        results.append(("–î–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤", test_detection()))
        results.append(("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤", test_feature_extraction()))
        results.append(("–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ", test_matching()))
        results.append(("–†–µ–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã", test_real_map()))
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
    
    print("\n" + "=" * 60)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´")
    print("=" * 60)
    
    for name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{name}: {status}")
    
    total = len(results)
    passed = sum(1 for _, r in results if r)
    
    print(f"\n–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}, –ø—Ä–æ–π–¥–µ–Ω–æ: {passed}, –ø—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}")
    
    if passed == total:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! ML —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return 0
    else:
        print("\n‚ö† –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã.")
        return 1


if __name__ == "__main__":
    exit(main())

