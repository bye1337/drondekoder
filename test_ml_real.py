#!/usr/bin/env python3
"""
–†–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç ML —Å–∏—Å—Ç–µ–º—ã —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –∫–∞—Ä—Ç—ã –∏ –ø–æ–∏—Å–∫–æ–º
"""
import cv2
import numpy as np
from object_matcher import ObjectMatcher

def test_with_uploaded_maps():
    """–¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞"""
    print("=" * 60)
    print("–†–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢ ML –°–ò–°–¢–ï–ú–´")
    print("=" * 60)
    
    import glob
    
    # –ò—â–µ–º –∫–∞—Ä—Ç—ã
    map_files = glob.glob("maps_storage/*.jpg") + glob.glob("uploads/*.jpg")
    
    if not map_files:
        print("‚ùå –ö–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return False
    
    print(f"\n–ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç: {len(map_files)}")
    
    for map_path in map_files[:2]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 2 –∫–∞—Ä—Ç—ã
        print(f"\n{'='*60}")
        print(f"–ö–∞—Ä—Ç–∞: {map_path}")
        print('='*60)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—É
        map_image = cv2.imread(map_path)
        if map_image is None:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç—É")
            continue
        
        print(f"–†–∞–∑–º–µ—Ä: {map_image.shape[1]}x{map_image.shape[0]}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ML
        matcher = ObjectMatcher(model_size='n', confidence_threshold=0.2)
        
        # –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –Ω–∞ –≤—Å–µ–π –∫–∞—Ä—Ç–µ
        print("\n–î–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ...")
        objects = matcher.detect_objects(map_image)
        print(f"‚úì –ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(objects)}")
        
        if len(objects) > 0:
            print("\n–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:")
            class_names = {
                0: 'person', 1: 'bicycle', 2: 'car', 3: 'motorcycle', 4: 'airplane',
                5: 'bus', 6: 'train', 7: 'truck', 8: 'boat', 9: 'traffic light',
                10: 'fire hydrant', 15: 'cat', 16: 'dog', 24: 'backpack', 25: 'umbrella'
            }
            
            for i, obj in enumerate(objects[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                class_name = class_names.get(obj.class_id, f'class_{obj.class_id}')
                print(f"  {i+1}. {class_name} - —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {obj.confidence:.2f}, "
                      f"—Ü–µ–Ω—Ç—Ä: ({obj.center[0]}, {obj.center[1]})")
        
        # –°–æ–∑–¥–∞–µ–º –º–∞–ª–µ–Ω—å–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ü–µ–Ω—Ç—Ä–∞ –∫–∞—Ä—Ç—ã
        h, w = map_image.shape[:2]
        center_y, center_x = h // 2, w // 2
        crop_size = min(h, w) // 3
        
        small_image = map_image[
            max(0, center_y - crop_size//2):min(h, center_y + crop_size//2),
            max(0, center_x - crop_size//2):min(w, center_x + crop_size//2)
        ]
        
        print(f"\n–°–æ–∑–¥–∞–Ω–æ –º–∞–ª–µ–Ω—å–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {small_image.shape[1]}x{small_image.shape[0]}")
        
        # –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –Ω–∞ –º–∞–ª–µ–Ω—å–∫–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        small_objects = matcher.detect_objects(small_image)
        print(f"‚úì –û–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –º–∞–ª–µ–Ω—å–∫–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏: {len(small_objects)}")
        
        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        print("\n–ü–æ–∏—Å–∫ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è...")
        result = matcher.find_location(map_image, small_image, search_step=100)
        
        if result:
            print(f"‚úÖ –ú–ï–°–¢–û–ü–û–õ–û–ñ–ï–ù–ò–ï –ù–ê–ô–î–ï–ù–û!")
            print(f"   –¶–µ–Ω—Ç—Ä: ({result['x']}, {result['y']})")
            print(f"   –û–∂–∏–¥–∞–ª–æ—Å—å: ({center_x}, {center_y})")
            print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.2f}%")
            print(f"   –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –æ–±—ä–µ–∫—Ç–æ–≤: {result['matches_count']}")
            
            error = np.sqrt((center_x - result['x'])**2 + (center_y - result['y'])**2)
            print(f"   –û—à–∏–±–∫–∞: {error:.1f} –ø–∏–∫—Å–µ–ª–µ–π")
            
            if error < 100:
                print("   üéØ –û—Ç–ª–∏—á–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å!")
            elif error < 300:
                print("   ‚úì –•–æ—Ä–æ—à–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å")
            else:
                print("   ‚ö† –¢–æ—á–Ω–æ—Å—Ç—å –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å")
        else:
            print("‚ö† –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            if len(objects) == 0:
                print("   –ü—Ä–∏—á–∏–Ω–∞: –Ω–∞ –∫–∞—Ä—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤ YOLO")
            elif len(small_objects) == 0:
                print("   –ü—Ä–∏—á–∏–Ω–∞: –Ω–∞ –º–∞–ª–µ–Ω—å–∫–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤")
            else:
                print("   –ü—Ä–∏—á–∏–Ω–∞: –æ–±—ä–µ–∫—Ç—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
    
    return True


if __name__ == "__main__":
    success = test_with_uploaded_maps()
    if success:
        print("\n" + "="*60)
        print("‚úì –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
        print("="*60)

